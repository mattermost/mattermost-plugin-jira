// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/ChannelSubscriptionFilters should match snapshot 1`] = `
<div
  className="margin-bottom"
>
  <label
    className="control-label margin-bottom"
  >
    Filters
  </label>
  <div>
    <div
      key="0"
    >
      <ChannelSubscriptionFilter
        addValidate={[MockFunction]}
        chosenIssueTypes={
          [
            "10001",
          ]
        }
        field={
          {
            "issueTypes": [
              {
                "id": "10001",
                "name": "Bug",
              },
            ],
            "key": "priority",
            "name": "Priority",
            "schema": {
              "system": "priority",
              "type": "priority",
            },
            "values": [
              {
                "label": "Highest",
                "value": "1",
              },
              {
                "label": "High",
                "value": "2",
              },
              {
                "label": "Medium",
                "value": "3",
              },
              {
                "label": "Low",
                "value": "4",
              },
              {
                "label": "Lowest",
                "value": "5",
              },
            ],
          }
        }
        fields={
          [
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "commentVisibility",
              "name": "Comment Visibility",
              "schema": {
                "type": "commentVisibility",
              },
              "values": [],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "priority",
              "name": "Priority",
              "schema": {
                "system": "priority",
                "type": "priority",
              },
              "values": [
                {
                  "label": "Highest",
                  "value": "1",
                },
                {
                  "label": "High",
                  "value": "2",
                },
                {
                  "label": "Medium",
                  "value": "3",
                },
                {
                  "label": "Low",
                  "value": "4",
                },
                {
                  "label": "Lowest",
                  "value": "5",
                },
              ],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "status",
              "name": "Status",
              "schema": {
                "type": "array",
              },
              "values": [
                {
                  "label": "TODO",
                  "value": "1001",
                },
              ],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "teamField",
              "name": "Team",
              "schema": {
                "type": "team",
              },
              "values": [],
            },
          ]
        }
        instanceID="https://something.atlassian.net"
        issueMetadata={
          {
            "issue_types_with_statuses": [
              {
                "id": "10001",
                "name": "Bug",
                "statuses": [
                  {
                    "id": "1001",
                    "name": "TODO",
                  },
                ],
              },
            ],
            "projects": [
              {
                "issuetypes": [
                  {
                    "fields": {
                      "priority": {
                        "allowedValues": [
                          {
                            "id": "1",
                            "name": "Highest",
                          },
                          {
                            "id": "2",
                            "name": "High",
                          },
                          {
                            "id": "3",
                            "name": "Medium",
                          },
                          {
                            "id": "4",
                            "name": "Low",
                          },
                          {
                            "id": "5",
                            "name": "Lowest",
                          },
                        ],
                        "hasDefaultValue": false,
                        "key": "priority",
                        "name": "Priority",
                        "operations": [
                          "set",
                        ],
                        "required": false,
                        "schema": {
                          "system": "priority",
                          "type": "priority",
                        },
                      },
                    },
                    "id": "10001",
                    "name": "Bug",
                    "subtask": false,
                  },
                ],
                "key": "TEST",
              },
            ],
          }
        }
        onChange={[Function]}
        removeFilter={[Function]}
        removeValidate={[MockFunction]}
        securityLevelEmptyForJiraSubscriptions={true}
        theme={{}}
        value={
          {
            "inclusion": "include_any",
            "key": "priority",
            "values": [
              "1",
            ],
          }
        }
      />
    </div>
    <div>
      <EmptyChannelSubscriptionFilter
        cancelAdd={[Function]}
        chosenIssueTypes={
          [
            "10001",
          ]
        }
        fields={
          [
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "commentVisibility",
              "name": "Comment Visibility",
              "schema": {
                "type": "commentVisibility",
              },
              "values": [],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "priority",
              "name": "Priority",
              "schema": {
                "system": "priority",
                "type": "priority",
              },
              "values": [
                {
                  "label": "Highest",
                  "value": "1",
                },
                {
                  "label": "High",
                  "value": "2",
                },
                {
                  "label": "Medium",
                  "value": "3",
                },
                {
                  "label": "Low",
                  "value": "4",
                },
                {
                  "label": "Lowest",
                  "value": "5",
                },
              ],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "status",
              "name": "Status",
              "schema": {
                "type": "array",
              },
              "values": [
                {
                  "label": "TODO",
                  "value": "1001",
                },
              ],
            },
            {
              "issueTypes": [
                {
                  "id": "10001",
                  "name": "Bug",
                },
              ],
              "key": "teamField",
              "name": "Team",
              "schema": {
                "type": "team",
              },
              "values": [],
            },
          ]
        }
        issueMetadata={
          {
            "issue_types_with_statuses": [
              {
                "id": "10001",
                "name": "Bug",
                "statuses": [
                  {
                    "id": "1001",
                    "name": "TODO",
                  },
                ],
              },
            ],
            "projects": [
              {
                "issuetypes": [
                  {
                    "fields": {
                      "priority": {
                        "allowedValues": [
                          {
                            "id": "1",
                            "name": "Highest",
                          },
                          {
                            "id": "2",
                            "name": "High",
                          },
                          {
                            "id": "3",
                            "name": "Medium",
                          },
                          {
                            "id": "4",
                            "name": "Low",
                          },
                          {
                            "id": "5",
                            "name": "Lowest",
                          },
                        ],
                        "hasDefaultValue": false,
                        "key": "priority",
                        "name": "Priority",
                        "operations": [
                          "set",
                        ],
                        "required": false,
                        "schema": {
                          "system": "priority",
                          "type": "priority",
                        },
                      },
                    },
                    "id": "10001",
                    "name": "Bug",
                    "subtask": false,
                  },
                ],
                "key": "TEST",
              },
            ],
          }
        }
        onChange={[Function]}
        theme={{}}
      />
    </div>
    <button
      className="btn style--none d-flex align-items-center"
      disabled={true}
      onClick={[Function]}
      type="button"
    >
      <span
        style={
          {
            "fontSize": "24px",
            "margin": "-1px 4px 0 0",
          }
        }
      >
        +
      </span>
      Add Filter
    </button>
  </div>
</div>
`;
